
Blinky_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000122c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080013b4  080013b4  000023b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013f4  080013f4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  080013f4  080013f4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013f4  080013f4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013f4  080013f4  000023f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080013f8  080013f8  000023f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080013fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001408  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001408  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003d40  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e5f  00000000  00000000  00006d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000548  00000000  00000000  00007be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003d8  00000000  00000000  00008128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023fc5  00000000  00000000  00008500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005214  00000000  00000000  0002c4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddfce  00000000  00000000  000316d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010f6a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001368  00000000  00000000  0010f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00110a54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800139c 	.word	0x0800139c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800139c 	.word	0x0800139c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f90f 	bl	80003ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f832 	bl	8000238 <SystemClock_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  RCC->AHB2ENR |= 0x01;
 80001d4:	4b17      	ldr	r3, [pc, #92]	@ (8000234 <main+0x6c>)
 80001d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d8:	4a16      	ldr	r2, [pc, #88]	@ (8000234 <main+0x6c>)
 80001da:	f043 0301 	orr.w	r3, r3, #1
 80001de:	64d3      	str	r3, [r2, #76]	@ 0x4c
	  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80001e0:	4b14      	ldr	r3, [pc, #80]	@ (8000234 <main+0x6c>)
 80001e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001e4:	4a13      	ldr	r2, [pc, #76]	@ (8000234 <main+0x6c>)
 80001e6:	f043 0301 	orr.w	r3, r3, #1
 80001ea:	64d3      	str	r3, [r2, #76]	@ 0x4c

	  GPIOA->MODER &= ~(GPIO_MODER_MODER5); //Clear
 80001ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80001fa:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= (1 << 10);
 80001fc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800020a:	6013      	str	r3, [r2, #0]

	  //Turn on
	  GPIOA->BSRR = (1 << 5);
 800020c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000210:	2220      	movs	r2, #32
 8000212:	619a      	str	r2, [r3, #24]
	  HAL_Delay(1000);
 8000214:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000218:	f000 f95e 	bl	80004d8 <HAL_Delay>
	  //Turn off
	  GPIOA->BSRR = (1 << 21);
 800021c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000220:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000224:	619a      	str	r2, [r3, #24]
	  HAL_Delay(1000);
 8000226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022a:	f000 f955 	bl	80004d8 <HAL_Delay>
	  RCC->AHB2ENR |= 0x01;
 800022e:	bf00      	nop
 8000230:	e7d0      	b.n	80001d4 <main+0xc>
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b096      	sub	sp, #88	@ 0x58
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0314 	add.w	r3, r7, #20
 8000242:	2244      	movs	r2, #68	@ 0x44
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f87c 	bl	8001344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	463b      	mov	r3, r7
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800025a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800025e:	f000 fa53 	bl	8000708 <HAL_PWREx_ControlVoltageScaling>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000268:	f000 f82c 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800026c:	2310      	movs	r3, #16
 800026e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000278:	2360      	movs	r3, #96	@ 0x60
 800027a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027c:	2300      	movs	r3, #0
 800027e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0314 	add.w	r3, r7, #20
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fa95 	bl	80007b4 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000290:	f000 f818 	bl	80002c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000298:	2300      	movs	r3, #0
 800029a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a8:	463b      	mov	r3, r7
 80002aa:	2100      	movs	r1, #0
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 fe5d 	bl	8000f6c <HAL_RCC_ClockConfig>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002b8:	f000 f804 	bl	80002c4 <Error_Handler>
  }
}
 80002bc:	bf00      	nop
 80002be:	3758      	adds	r7, #88	@ 0x58
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002c8:	b672      	cpsid	i
}
 80002ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002cc:	bf00      	nop
 80002ce:	e7fd      	b.n	80002cc <Error_Handler+0x8>

080002d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <HAL_MspInit+0x44>)
 80002d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002da:	4a0e      	ldr	r2, [pc, #56]	@ (8000314 <HAL_MspInit+0x44>)
 80002dc:	f043 0301 	orr.w	r3, r3, #1
 80002e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80002e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <HAL_MspInit+0x44>)
 80002e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80002e6:	f003 0301 	and.w	r3, r3, #1
 80002ea:	607b      	str	r3, [r7, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ee:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <HAL_MspInit+0x44>)
 80002f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002f2:	4a08      	ldr	r2, [pc, #32]	@ (8000314 <HAL_MspInit+0x44>)
 80002f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80002fa:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <HAL_MspInit+0x44>)
 80002fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80002fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000302:	603b      	str	r3, [r7, #0]
 8000304:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800031c:	bf00      	nop
 800031e:	e7fd      	b.n	800031c <NMI_Handler+0x4>

08000320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <HardFault_Handler+0x4>

08000328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800032c:	bf00      	nop
 800032e:	e7fd      	b.n	800032c <MemManage_Handler+0x4>

08000330 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000334:	bf00      	nop
 8000336:	e7fd      	b.n	8000334 <BusFault_Handler+0x4>

08000338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800033c:	bf00      	nop
 800033e:	e7fd      	b.n	800033c <UsageFault_Handler+0x4>

08000340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr

0800034e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr

0800036a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036a:	b580      	push	{r7, lr}
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800036e:	f000 f893 	bl	8000498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000372:	bf00      	nop
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <SystemInit+0x20>)
 800037e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000382:	4a05      	ldr	r2, [pc, #20]	@ (8000398 <SystemInit+0x20>)
 8000384:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000388:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	e000ed00 	.word	0xe000ed00

0800039c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800039c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80003a0:	f7ff ffea 	bl	8000378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a4:	480c      	ldr	r0, [pc, #48]	@ (80003d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a6:	490d      	ldr	r1, [pc, #52]	@ (80003dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a8:	4a0d      	ldr	r2, [pc, #52]	@ (80003e0 <LoopForever+0xe>)
  movs r3, #0
 80003aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003ac:	e002      	b.n	80003b4 <LoopCopyDataInit>

080003ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003b2:	3304      	adds	r3, #4

080003b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b8:	d3f9      	bcc.n	80003ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ba:	4a0a      	ldr	r2, [pc, #40]	@ (80003e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003bc:	4c0a      	ldr	r4, [pc, #40]	@ (80003e8 <LoopForever+0x16>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c0:	e001      	b.n	80003c6 <LoopFillZerobss>

080003c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c4:	3204      	adds	r2, #4

080003c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c8:	d3fb      	bcc.n	80003c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80003ca:	f000 ffc3 	bl	8001354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80003ce:	f7ff fefb 	bl	80001c8 <main>

080003d2 <LoopForever>:

LoopForever:
    b LoopForever
 80003d2:	e7fe      	b.n	80003d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80003d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80003d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003dc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003e0:	080013fc 	.word	0x080013fc
  ldr r2, =_sbss
 80003e4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003e8:	2000002c 	.word	0x2000002c

080003ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80003ec:	e7fe      	b.n	80003ec <ADC1_2_IRQHandler>

080003ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003ee:	b580      	push	{r7, lr}
 80003f0:	b082      	sub	sp, #8
 80003f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80003f4:	2300      	movs	r3, #0
 80003f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80003f8:	2003      	movs	r0, #3
 80003fa:	f000 f943 	bl	8000684 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80003fe:	200f      	movs	r0, #15
 8000400:	f000 f80e 	bl	8000420 <HAL_InitTick>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800040a:	2301      	movs	r3, #1
 800040c:	71fb      	strb	r3, [r7, #7]
 800040e:	e001      	b.n	8000414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000410:	f7ff ff5e 	bl	80002d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000414:	79fb      	ldrb	r3, [r7, #7]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000428:	2300      	movs	r3, #0
 800042a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800042c:	4b17      	ldr	r3, [pc, #92]	@ (800048c <HAL_InitTick+0x6c>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d023      	beq.n	800047c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000434:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <HAL_InitTick+0x70>)
 8000436:	681a      	ldr	r2, [r3, #0]
 8000438:	4b14      	ldr	r3, [pc, #80]	@ (800048c <HAL_InitTick+0x6c>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	4619      	mov	r1, r3
 800043e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000442:	fbb3 f3f1 	udiv	r3, r3, r1
 8000446:	fbb2 f3f3 	udiv	r3, r2, r3
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f941 	bl	80006d2 <HAL_SYSTICK_Config>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d10f      	bne.n	8000476 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b0f      	cmp	r3, #15
 800045a:	d809      	bhi.n	8000470 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800045c:	2200      	movs	r2, #0
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	f04f 30ff 	mov.w	r0, #4294967295
 8000464:	f000 f919 	bl	800069a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000468:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <HAL_InitTick+0x74>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6013      	str	r3, [r2, #0]
 800046e:	e007      	b.n	8000480 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000470:	2301      	movs	r3, #1
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	e004      	b.n	8000480 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000476:	2301      	movs	r3, #1
 8000478:	73fb      	strb	r3, [r7, #15]
 800047a:	e001      	b.n	8000480 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800047c:	2301      	movs	r3, #1
 800047e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000480:	7bfb      	ldrb	r3, [r7, #15]
}
 8000482:	4618      	mov	r0, r3
 8000484:	3710      	adds	r7, #16
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000008 	.word	0x20000008
 8000490:	20000000 	.word	0x20000000
 8000494:	20000004 	.word	0x20000004

08000498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <HAL_IncTick+0x20>)
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <HAL_IncTick+0x24>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4413      	add	r3, r2
 80004a8:	4a04      	ldr	r2, [pc, #16]	@ (80004bc <HAL_IncTick+0x24>)
 80004aa:	6013      	str	r3, [r2, #0]
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	20000008 	.word	0x20000008
 80004bc:	20000028 	.word	0x20000028

080004c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  return uwTick;
 80004c4:	4b03      	ldr	r3, [pc, #12]	@ (80004d4 <HAL_GetTick+0x14>)
 80004c6:	681b      	ldr	r3, [r3, #0]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000028 	.word	0x20000028

080004d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80004e0:	f7ff ffee 	bl	80004c0 <HAL_GetTick>
 80004e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004f0:	d005      	beq.n	80004fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80004f2:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <HAL_Delay+0x44>)
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	461a      	mov	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	4413      	add	r3, r2
 80004fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80004fe:	bf00      	nop
 8000500:	f7ff ffde 	bl	80004c0 <HAL_GetTick>
 8000504:	4602      	mov	r2, r0
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	1ad3      	subs	r3, r2, r3
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	429a      	cmp	r2, r3
 800050e:	d8f7      	bhi.n	8000500 <HAL_Delay+0x28>
  {
  }
}
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	3710      	adds	r7, #16
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000008 	.word	0x20000008

08000520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	f003 0307 	and.w	r3, r3, #7
 800052e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <__NVIC_SetPriorityGrouping+0x44>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000536:	68ba      	ldr	r2, [r7, #8]
 8000538:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800053c:	4013      	ands	r3, r2
 800053e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000544:	68bb      	ldr	r3, [r7, #8]
 8000546:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000548:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800054c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000552:	4a04      	ldr	r2, [pc, #16]	@ (8000564 <__NVIC_SetPriorityGrouping+0x44>)
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	60d3      	str	r3, [r2, #12]
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800056c:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <__NVIC_GetPriorityGrouping+0x18>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	0a1b      	lsrs	r3, r3, #8
 8000572:	f003 0307 	and.w	r3, r3, #7
}
 8000576:	4618      	mov	r0, r3
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	6039      	str	r1, [r7, #0]
 800058e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000594:	2b00      	cmp	r3, #0
 8000596:	db0a      	blt.n	80005ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	b2da      	uxtb	r2, r3
 800059c:	490c      	ldr	r1, [pc, #48]	@ (80005d0 <__NVIC_SetPriority+0x4c>)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	0112      	lsls	r2, r2, #4
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	440b      	add	r3, r1
 80005a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005ac:	e00a      	b.n	80005c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4908      	ldr	r1, [pc, #32]	@ (80005d4 <__NVIC_SetPriority+0x50>)
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	3b04      	subs	r3, #4
 80005bc:	0112      	lsls	r2, r2, #4
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	440b      	add	r3, r1
 80005c2:	761a      	strb	r2, [r3, #24]
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr
 80005d0:	e000e100 	.word	0xe000e100
 80005d4:	e000ed00 	.word	0xe000ed00

080005d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005d8:	b480      	push	{r7}
 80005da:	b089      	sub	sp, #36	@ 0x24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	f003 0307 	and.w	r3, r3, #7
 80005ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ec:	69fb      	ldr	r3, [r7, #28]
 80005ee:	f1c3 0307 	rsb	r3, r3, #7
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	bf28      	it	cs
 80005f6:	2304      	movcs	r3, #4
 80005f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	69fb      	ldr	r3, [r7, #28]
 80005fc:	3304      	adds	r3, #4
 80005fe:	2b06      	cmp	r3, #6
 8000600:	d902      	bls.n	8000608 <NVIC_EncodePriority+0x30>
 8000602:	69fb      	ldr	r3, [r7, #28]
 8000604:	3b03      	subs	r3, #3
 8000606:	e000      	b.n	800060a <NVIC_EncodePriority+0x32>
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060c:	f04f 32ff 	mov.w	r2, #4294967295
 8000610:	69bb      	ldr	r3, [r7, #24]
 8000612:	fa02 f303 	lsl.w	r3, r2, r3
 8000616:	43da      	mvns	r2, r3
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	401a      	ands	r2, r3
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000620:	f04f 31ff 	mov.w	r1, #4294967295
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	43d9      	mvns	r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000630:	4313      	orrs	r3, r2
         );
}
 8000632:	4618      	mov	r0, r3
 8000634:	3724      	adds	r7, #36	@ 0x24
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
	...

08000640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3b01      	subs	r3, #1
 800064c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000650:	d301      	bcc.n	8000656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000652:	2301      	movs	r3, #1
 8000654:	e00f      	b.n	8000676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000656:	4a0a      	ldr	r2, [pc, #40]	@ (8000680 <SysTick_Config+0x40>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3b01      	subs	r3, #1
 800065c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800065e:	210f      	movs	r1, #15
 8000660:	f04f 30ff 	mov.w	r0, #4294967295
 8000664:	f7ff ff8e 	bl	8000584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <SysTick_Config+0x40>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800066e:	4b04      	ldr	r3, [pc, #16]	@ (8000680 <SysTick_Config+0x40>)
 8000670:	2207      	movs	r2, #7
 8000672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010

08000684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff47 	bl	8000520 <__NVIC_SetPriorityGrouping>
}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}

0800069a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b086      	sub	sp, #24
 800069e:	af00      	add	r7, sp, #0
 80006a0:	4603      	mov	r3, r0
 80006a2:	60b9      	str	r1, [r7, #8]
 80006a4:	607a      	str	r2, [r7, #4]
 80006a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80006ac:	f7ff ff5c 	bl	8000568 <__NVIC_GetPriorityGrouping>
 80006b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	68b9      	ldr	r1, [r7, #8]
 80006b6:	6978      	ldr	r0, [r7, #20]
 80006b8:	f7ff ff8e 	bl	80005d8 <NVIC_EncodePriority>
 80006bc:	4602      	mov	r2, r0
 80006be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c2:	4611      	mov	r1, r2
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff ff5d 	bl	8000584 <__NVIC_SetPriority>
}
 80006ca:	bf00      	nop
 80006cc:	3718      	adds	r7, #24
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}

080006d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006d2:	b580      	push	{r7, lr}
 80006d4:	b082      	sub	sp, #8
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f7ff ffb0 	bl	8000640 <SysTick_Config>
 80006e0:	4603      	mov	r3, r0
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006f0:	4b04      	ldr	r3, [pc, #16]	@ (8000704 <HAL_PWREx_GetVoltageRange+0x18>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	40007000 	.word	0x40007000

08000708 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000716:	d130      	bne.n	800077a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000718:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000724:	d038      	beq.n	8000798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800072e:	4a1e      	ldr	r2, [pc, #120]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000730:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000734:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000736:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2232      	movs	r2, #50	@ 0x32
 800073c:	fb02 f303 	mul.w	r3, r2, r3
 8000740:	4a1b      	ldr	r2, [pc, #108]	@ (80007b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000742:	fba2 2303 	umull	r2, r3, r2, r3
 8000746:	0c9b      	lsrs	r3, r3, #18
 8000748:	3301      	adds	r3, #1
 800074a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800074c:	e002      	b.n	8000754 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	3b01      	subs	r3, #1
 8000752:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800075c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000760:	d102      	bne.n	8000768 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d1f2      	bne.n	800074e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000768:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000770:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000774:	d110      	bne.n	8000798 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000776:	2303      	movs	r3, #3
 8000778:	e00f      	b.n	800079a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800077a:	4b0b      	ldr	r3, [pc, #44]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000786:	d007      	beq.n	8000798 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000790:	4a05      	ldr	r2, [pc, #20]	@ (80007a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000796:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3714      	adds	r7, #20
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40007000 	.word	0x40007000
 80007ac:	20000000 	.word	0x20000000
 80007b0:	431bde83 	.word	0x431bde83

080007b4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d101      	bne.n	80007c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e3ca      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80007c6:	4b97      	ldr	r3, [pc, #604]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80007c8:	689b      	ldr	r3, [r3, #8]
 80007ca:	f003 030c 	and.w	r3, r3, #12
 80007ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80007d0:	4b94      	ldr	r3, [pc, #592]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	f003 0303 	and.w	r3, r3, #3
 80007d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 0310 	and.w	r3, r3, #16
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	f000 80e4 	beq.w	80009b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d007      	beq.n	80007fe <HAL_RCC_OscConfig+0x4a>
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	2b0c      	cmp	r3, #12
 80007f2:	f040 808b 	bne.w	800090c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	f040 8087 	bne.w	800090c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80007fe:	4b89      	ldr	r3, [pc, #548]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <HAL_RCC_OscConfig+0x62>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d101      	bne.n	8000816 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000812:	2301      	movs	r3, #1
 8000814:	e3a2      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6a1a      	ldr	r2, [r3, #32]
 800081a:	4b82      	ldr	r3, [pc, #520]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <HAL_RCC_OscConfig+0x7c>
 8000826:	4b7f      	ldr	r3, [pc, #508]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800082e:	e005      	b.n	800083c <HAL_RCC_OscConfig+0x88>
 8000830:	4b7c      	ldr	r3, [pc, #496]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000832:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000836:	091b      	lsrs	r3, r3, #4
 8000838:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800083c:	4293      	cmp	r3, r2
 800083e:	d223      	bcs.n	8000888 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6a1b      	ldr	r3, [r3, #32]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fd1d 	bl	8001284 <RCC_SetFlashLatencyFromMSIRange>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e383      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000854:	4b73      	ldr	r3, [pc, #460]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a72      	ldr	r2, [pc, #456]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800085a:	f043 0308 	orr.w	r3, r3, #8
 800085e:	6013      	str	r3, [r2, #0]
 8000860:	4b70      	ldr	r3, [pc, #448]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	496d      	ldr	r1, [pc, #436]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800086e:	4313      	orrs	r3, r2
 8000870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000872:	4b6c      	ldr	r3, [pc, #432]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	4968      	ldr	r1, [pc, #416]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000882:	4313      	orrs	r3, r2
 8000884:	604b      	str	r3, [r1, #4]
 8000886:	e025      	b.n	80008d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000888:	4b66      	ldr	r3, [pc, #408]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a65      	ldr	r2, [pc, #404]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b63      	ldr	r3, [pc, #396]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a1b      	ldr	r3, [r3, #32]
 80008a0:	4960      	ldr	r1, [pc, #384]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80008a2:	4313      	orrs	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80008a6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	495b      	ldr	r1, [pc, #364]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80008ba:	69bb      	ldr	r3, [r7, #24]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d109      	bne.n	80008d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fcdd 	bl	8001284 <RCC_SetFlashLatencyFromMSIRange>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e343      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80008d4:	f000 fc4a 	bl	800116c <HAL_RCC_GetSysClockFreq>
 80008d8:	4602      	mov	r2, r0
 80008da:	4b52      	ldr	r3, [pc, #328]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	4950      	ldr	r1, [pc, #320]	@ (8000a28 <HAL_RCC_OscConfig+0x274>)
 80008e6:	5ccb      	ldrb	r3, [r1, r3]
 80008e8:	f003 031f 	and.w	r3, r3, #31
 80008ec:	fa22 f303 	lsr.w	r3, r2, r3
 80008f0:	4a4e      	ldr	r2, [pc, #312]	@ (8000a2c <HAL_RCC_OscConfig+0x278>)
 80008f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80008f4:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <HAL_RCC_OscConfig+0x27c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fd91 	bl	8000420 <HAL_InitTick>
 80008fe:	4603      	mov	r3, r0
 8000900:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d052      	beq.n	80009ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	e327      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d032      	beq.n	800097a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000914:	4b43      	ldr	r3, [pc, #268]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a42      	ldr	r2, [pc, #264]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800091a:	f043 0301 	orr.w	r3, r3, #1
 800091e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000920:	f7ff fdce 	bl	80004c0 <HAL_GetTick>
 8000924:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000926:	e008      	b.n	800093a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000928:	f7ff fdca 	bl	80004c0 <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b02      	cmp	r3, #2
 8000934:	d901      	bls.n	800093a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000936:	2303      	movs	r3, #3
 8000938:	e310      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800093a:	4b3a      	ldr	r3, [pc, #232]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	2b00      	cmp	r3, #0
 8000944:	d0f0      	beq.n	8000928 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000946:	4b37      	ldr	r3, [pc, #220]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a36      	ldr	r2, [pc, #216]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800094c:	f043 0308 	orr.w	r3, r3, #8
 8000950:	6013      	str	r3, [r2, #0]
 8000952:	4b34      	ldr	r3, [pc, #208]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	4931      	ldr	r1, [pc, #196]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000960:	4313      	orrs	r3, r2
 8000962:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000964:	4b2f      	ldr	r3, [pc, #188]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69db      	ldr	r3, [r3, #28]
 8000970:	021b      	lsls	r3, r3, #8
 8000972:	492c      	ldr	r1, [pc, #176]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000974:	4313      	orrs	r3, r2
 8000976:	604b      	str	r3, [r1, #4]
 8000978:	e01a      	b.n	80009b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800097a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a29      	ldr	r2, [pc, #164]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000986:	f7ff fd9b 	bl	80004c0 <HAL_GetTick>
 800098a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800098c:	e008      	b.n	80009a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800098e:	f7ff fd97 	bl	80004c0 <HAL_GetTick>
 8000992:	4602      	mov	r2, r0
 8000994:	693b      	ldr	r3, [r7, #16]
 8000996:	1ad3      	subs	r3, r2, r3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d901      	bls.n	80009a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800099c:	2303      	movs	r3, #3
 800099e:	e2dd      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80009a0:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d1f0      	bne.n	800098e <HAL_RCC_OscConfig+0x1da>
 80009ac:	e000      	b.n	80009b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d074      	beq.n	8000aa6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	2b08      	cmp	r3, #8
 80009c0:	d005      	beq.n	80009ce <HAL_RCC_OscConfig+0x21a>
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	2b0c      	cmp	r3, #12
 80009c6:	d10e      	bne.n	80009e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	2b03      	cmp	r3, #3
 80009cc:	d10b      	bne.n	80009e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d064      	beq.n	8000aa4 <HAL_RCC_OscConfig+0x2f0>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d160      	bne.n	8000aa4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e2ba      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80009ee:	d106      	bne.n	80009fe <HAL_RCC_OscConfig+0x24a>
 80009f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 80009f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e026      	b.n	8000a4c <HAL_RCC_OscConfig+0x298>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000a06:	d115      	bne.n	8000a34 <HAL_RCC_OscConfig+0x280>
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000a0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a12:	6013      	str	r3, [r2, #0]
 8000a14:	4b03      	ldr	r3, [pc, #12]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a02      	ldr	r2, [pc, #8]	@ (8000a24 <HAL_RCC_OscConfig+0x270>)
 8000a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e014      	b.n	8000a4c <HAL_RCC_OscConfig+0x298>
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000
 8000a28:	080013b4 	.word	0x080013b4
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000004 	.word	0x20000004
 8000a34:	4ba0      	ldr	r3, [pc, #640]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a9f      	ldr	r2, [pc, #636]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000a3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	4b9d      	ldr	r3, [pc, #628]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a9c      	ldr	r2, [pc, #624]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000a46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d013      	beq.n	8000a7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a54:	f7ff fd34 	bl	80004c0 <HAL_GetTick>
 8000a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a5a:	e008      	b.n	8000a6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a5c:	f7ff fd30 	bl	80004c0 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	1ad3      	subs	r3, r2, r3
 8000a66:	2b64      	cmp	r3, #100	@ 0x64
 8000a68:	d901      	bls.n	8000a6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	e276      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000a6e:	4b92      	ldr	r3, [pc, #584]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0f0      	beq.n	8000a5c <HAL_RCC_OscConfig+0x2a8>
 8000a7a:	e014      	b.n	8000aa6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a7c:	f7ff fd20 	bl	80004c0 <HAL_GetTick>
 8000a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a82:	e008      	b.n	8000a96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000a84:	f7ff fd1c 	bl	80004c0 <HAL_GetTick>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	2b64      	cmp	r3, #100	@ 0x64
 8000a90:	d901      	bls.n	8000a96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000a92:	2303      	movs	r3, #3
 8000a94:	e262      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000a96:	4b88      	ldr	r3, [pc, #544]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1f0      	bne.n	8000a84 <HAL_RCC_OscConfig+0x2d0>
 8000aa2:	e000      	b.n	8000aa6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d060      	beq.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d005      	beq.n	8000ac4 <HAL_RCC_OscConfig+0x310>
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2b0c      	cmp	r3, #12
 8000abc:	d119      	bne.n	8000af2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d116      	bne.n	8000af2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ac4:	4b7c      	ldr	r3, [pc, #496]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d005      	beq.n	8000adc <HAL_RCC_OscConfig+0x328>
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d101      	bne.n	8000adc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e23f      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000adc:	4b76      	ldr	r3, [pc, #472]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	691b      	ldr	r3, [r3, #16]
 8000ae8:	061b      	lsls	r3, r3, #24
 8000aea:	4973      	ldr	r1, [pc, #460]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000aec:	4313      	orrs	r3, r2
 8000aee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000af0:	e040      	b.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d023      	beq.n	8000b42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000afa:	4b6f      	ldr	r3, [pc, #444]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a6e      	ldr	r2, [pc, #440]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b06:	f7ff fcdb 	bl	80004c0 <HAL_GetTick>
 8000b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b0c:	e008      	b.n	8000b20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b0e:	f7ff fcd7 	bl	80004c0 <HAL_GetTick>
 8000b12:	4602      	mov	r2, r0
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d901      	bls.n	8000b20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e21d      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000b20:	4b65      	ldr	r3, [pc, #404]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d0f0      	beq.n	8000b0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b2c:	4b62      	ldr	r3, [pc, #392]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	061b      	lsls	r3, r3, #24
 8000b3a:	495f      	ldr	r1, [pc, #380]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	604b      	str	r3, [r1, #4]
 8000b40:	e018      	b.n	8000b74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b42:	4b5d      	ldr	r3, [pc, #372]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a5c      	ldr	r2, [pc, #368]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b4e:	f7ff fcb7 	bl	80004c0 <HAL_GetTick>
 8000b52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b54:	e008      	b.n	8000b68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b56:	f7ff fcb3 	bl	80004c0 <HAL_GetTick>
 8000b5a:	4602      	mov	r2, r0
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	1ad3      	subs	r3, r2, r3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d901      	bls.n	8000b68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000b64:	2303      	movs	r3, #3
 8000b66:	e1f9      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000b68:	4b53      	ldr	r3, [pc, #332]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d1f0      	bne.n	8000b56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f003 0308 	and.w	r3, r3, #8
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d03c      	beq.n	8000bfa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	695b      	ldr	r3, [r3, #20]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d01c      	beq.n	8000bc2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b88:	4b4b      	ldr	r3, [pc, #300]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000b8e:	4a4a      	ldr	r2, [pc, #296]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000b98:	f7ff fc92 	bl	80004c0 <HAL_GetTick>
 8000b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000b9e:	e008      	b.n	8000bb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ba0:	f7ff fc8e 	bl	80004c0 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	d901      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	e1d4      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000bb2:	4b41      	ldr	r3, [pc, #260]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bb8:	f003 0302 	and.w	r3, r3, #2
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d0ef      	beq.n	8000ba0 <HAL_RCC_OscConfig+0x3ec>
 8000bc0:	e01b      	b.n	8000bfa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fc75 	bl	80004c0 <HAL_GetTick>
 8000bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bd8:	e008      	b.n	8000bec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000bda:	f7ff fc71 	bl	80004c0 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d901      	bls.n	8000bec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e1b7      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000bec:	4b32      	ldr	r3, [pc, #200]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1ef      	bne.n	8000bda <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0304 	and.w	r3, r3, #4
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f000 80a6 	beq.w	8000d54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000c0c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10d      	bne.n	8000c34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c18:	4b27      	ldr	r3, [pc, #156]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c1c:	4a26      	ldr	r2, [pc, #152]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c24:	4b24      	ldr	r3, [pc, #144]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c30:	2301      	movs	r3, #1
 8000c32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c34:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <HAL_RCC_OscConfig+0x508>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d118      	bne.n	8000c72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <HAL_RCC_OscConfig+0x508>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <HAL_RCC_OscConfig+0x508>)
 8000c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c4c:	f7ff fc38 	bl	80004c0 <HAL_GetTick>
 8000c50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c52:	e008      	b.n	8000c66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c54:	f7ff fc34 	bl	80004c0 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d901      	bls.n	8000c66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000c62:	2303      	movs	r3, #3
 8000c64:	e17a      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000c66:	4b15      	ldr	r3, [pc, #84]	@ (8000cbc <HAL_RCC_OscConfig+0x508>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f0      	beq.n	8000c54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d108      	bne.n	8000c8c <HAL_RCC_OscConfig+0x4d8>
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000c8a:	e029      	b.n	8000ce0 <HAL_RCC_OscConfig+0x52c>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	2b05      	cmp	r3, #5
 8000c92:	d115      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x50c>
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000c9a:	4a07      	ldr	r2, [pc, #28]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000caa:	4a03      	ldr	r2, [pc, #12]	@ (8000cb8 <HAL_RCC_OscConfig+0x504>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cb4:	e014      	b.n	8000ce0 <HAL_RCC_OscConfig+0x52c>
 8000cb6:	bf00      	nop
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40007000 	.word	0x40007000
 8000cc0:	4b9c      	ldr	r3, [pc, #624]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cc6:	4a9b      	ldr	r2, [pc, #620]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8000cd0:	4b98      	ldr	r3, [pc, #608]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000cd6:	4a97      	ldr	r2, [pc, #604]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000cd8:	f023 0304 	bic.w	r3, r3, #4
 8000cdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d016      	beq.n	8000d16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ce8:	f7ff fbea 	bl	80004c0 <HAL_GetTick>
 8000cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000cee:	e00a      	b.n	8000d06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000cf0:	f7ff fbe6 	bl	80004c0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d901      	bls.n	8000d06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e12a      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000d06:	4b8b      	ldr	r3, [pc, #556]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0ed      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x53c>
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d16:	f7ff fbd3 	bl	80004c0 <HAL_GetTick>
 8000d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d1c:	e00a      	b.n	8000d34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fbcf 	bl	80004c0 <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d901      	bls.n	8000d34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000d30:	2303      	movs	r3, #3
 8000d32:	e113      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000d34:	4b7f      	ldr	r3, [pc, #508]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1ed      	bne.n	8000d1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d42:	7ffb      	ldrb	r3, [r7, #31]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d105      	bne.n	8000d54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d48:	4b7a      	ldr	r3, [pc, #488]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d4c:	4a79      	ldr	r2, [pc, #484]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 80fe 	beq.w	8000f5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	f040 80d0 	bne.w	8000f08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000d68:	4b72      	ldr	r3, [pc, #456]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0203 	and.w	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d130      	bne.n	8000dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	3b01      	subs	r3, #1
 8000d88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d127      	bne.n	8000dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000d9a:	429a      	cmp	r2, r3
 8000d9c:	d11f      	bne.n	8000dde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000da8:	2a07      	cmp	r2, #7
 8000daa:	bf14      	ite	ne
 8000dac:	2201      	movne	r2, #1
 8000dae:	2200      	moveq	r2, #0
 8000db0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d113      	bne.n	8000dde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d109      	bne.n	8000dde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	085b      	lsrs	r3, r3, #1
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	d06e      	beq.n	8000ebc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	2b0c      	cmp	r3, #12
 8000de2:	d069      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000de4:	4b53      	ldr	r3, [pc, #332]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d105      	bne.n	8000dfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000df0:	4b50      	ldr	r3, [pc, #320]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e0ad      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000e00:	4b4c      	ldr	r3, [pc, #304]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a4b      	ldr	r2, [pc, #300]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000e0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e0c:	f7ff fb58 	bl	80004c0 <HAL_GetTick>
 8000e10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e12:	e008      	b.n	8000e26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e14:	f7ff fb54 	bl	80004c0 <HAL_GetTick>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d901      	bls.n	8000e26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000e22:	2303      	movs	r3, #3
 8000e24:	e09a      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000e26:	4b43      	ldr	r3, [pc, #268]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d1f0      	bne.n	8000e14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e32:	4b40      	ldr	r3, [pc, #256]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	4b40      	ldr	r3, [pc, #256]	@ (8000f38 <HAL_RCC_OscConfig+0x784>)
 8000e38:	4013      	ands	r3, r2
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8000e3e:	687a      	ldr	r2, [r7, #4]
 8000e40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8000e42:	3a01      	subs	r2, #1
 8000e44:	0112      	lsls	r2, r2, #4
 8000e46:	4311      	orrs	r1, r2
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000e4c:	0212      	lsls	r2, r2, #8
 8000e4e:	4311      	orrs	r1, r2
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8000e54:	0852      	lsrs	r2, r2, #1
 8000e56:	3a01      	subs	r2, #1
 8000e58:	0552      	lsls	r2, r2, #21
 8000e5a:	4311      	orrs	r1, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000e60:	0852      	lsrs	r2, r2, #1
 8000e62:	3a01      	subs	r2, #1
 8000e64:	0652      	lsls	r2, r2, #25
 8000e66:	4311      	orrs	r1, r2
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8000e6c:	0912      	lsrs	r2, r2, #4
 8000e6e:	0452      	lsls	r2, r2, #17
 8000e70:	430a      	orrs	r2, r1
 8000e72:	4930      	ldr	r1, [pc, #192]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e74:	4313      	orrs	r3, r2
 8000e76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000e78:	4b2e      	ldr	r3, [pc, #184]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e84:	4b2b      	ldr	r3, [pc, #172]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	4a2a      	ldr	r2, [pc, #168]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000e8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000e90:	f7ff fb16 	bl	80004c0 <HAL_GetTick>
 8000e94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000e96:	e008      	b.n	8000eaa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e98:	f7ff fb12 	bl	80004c0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d901      	bls.n	8000eaa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e058      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000eaa:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d0f0      	beq.n	8000e98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000eb6:	e050      	b.n	8000f5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e04f      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d148      	bne.n	8000f5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a19      	ldr	r2, [pc, #100]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000ece:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ed2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000ed4:	4b17      	ldr	r3, [pc, #92]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	4a16      	ldr	r2, [pc, #88]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000eda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ede:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000ee0:	f7ff faee 	bl	80004c0 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff faea 	bl	80004c0 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e030      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f0      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x734>
 8000f06:	e028      	b.n	8000f5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	2b0c      	cmp	r3, #12
 8000f0c:	d023      	beq.n	8000f56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <HAL_RCC_OscConfig+0x780>)
 8000f14:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f1a:	f7ff fad1 	bl	80004c0 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f20:	e00c      	b.n	8000f3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f22:	f7ff facd 	bl	80004c0 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d905      	bls.n	8000f3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8000f30:	2303      	movs	r3, #3
 8000f32:	e013      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
 8000f34:	40021000 	.word	0x40021000
 8000f38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <HAL_RCC_OscConfig+0x7b0>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1ec      	bne.n	8000f22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_RCC_OscConfig+0x7b0>)
 8000f4a:	68da      	ldr	r2, [r3, #12]
 8000f4c:	4905      	ldr	r1, [pc, #20]	@ (8000f64 <HAL_RCC_OscConfig+0x7b0>)
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <HAL_RCC_OscConfig+0x7b4>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	60cb      	str	r3, [r1, #12]
 8000f54:	e001      	b.n	8000f5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3720      	adds	r7, #32
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40021000 	.word	0x40021000
 8000f68:	feeefffc 	.word	0xfeeefffc

08000f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d101      	bne.n	8000f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e0e7      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f80:	4b75      	ldr	r3, [pc, #468]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	683a      	ldr	r2, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d910      	bls.n	8000fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f8e:	4b72      	ldr	r3, [pc, #456]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f023 0207 	bic.w	r2, r3, #7
 8000f96:	4970      	ldr	r1, [pc, #448]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4313      	orrs	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0cf      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d010      	beq.n	8000fde <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	4b66      	ldr	r3, [pc, #408]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d908      	bls.n	8000fde <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fcc:	4b63      	ldr	r3, [pc, #396]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8000fce:	689b      	ldr	r3, [r3, #8]
 8000fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4960      	ldr	r1, [pc, #384]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d04c      	beq.n	8001084 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d107      	bne.n	8001002 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ff2:	4b5a      	ldr	r3, [pc, #360]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d121      	bne.n	8001042 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e0a6      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	2b02      	cmp	r3, #2
 8001008:	d107      	bne.n	800101a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800100a:	4b54      	ldr	r3, [pc, #336]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d115      	bne.n	8001042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e09a      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d107      	bne.n	8001032 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001022:	4b4e      	ldr	r3, [pc, #312]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e08e      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001032:	4b4a      	ldr	r3, [pc, #296]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800103a:	2b00      	cmp	r3, #0
 800103c:	d101      	bne.n	8001042 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e086      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001042:	4b46      	ldr	r3, [pc, #280]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	f023 0203 	bic.w	r2, r3, #3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4943      	ldr	r1, [pc, #268]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001050:	4313      	orrs	r3, r2
 8001052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001054:	f7ff fa34 	bl	80004c0 <HAL_GetTick>
 8001058:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800105a:	e00a      	b.n	8001072 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800105c:	f7ff fa30 	bl	80004c0 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800106a:	4293      	cmp	r3, r2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e06e      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001072:	4b3a      	ldr	r3, [pc, #232]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 020c 	and.w	r2, r3, #12
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	429a      	cmp	r2, r3
 8001082:	d1eb      	bne.n	800105c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d010      	beq.n	80010b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	4b31      	ldr	r3, [pc, #196]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800109c:	429a      	cmp	r2, r3
 800109e:	d208      	bcs.n	80010b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a0:	4b2e      	ldr	r3, [pc, #184]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	492b      	ldr	r1, [pc, #172]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 80010ae:	4313      	orrs	r3, r2
 80010b0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010b2:	4b29      	ldr	r3, [pc, #164]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d210      	bcs.n	80010e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c0:	4b25      	ldr	r3, [pc, #148]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f023 0207 	bic.w	r2, r3, #7
 80010c8:	4923      	ldr	r1, [pc, #140]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d0:	4b21      	ldr	r3, [pc, #132]	@ (8001158 <HAL_RCC_ClockConfig+0x1ec>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f003 0307 	and.w	r3, r3, #7
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e036      	b.n	8001150 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0304 	and.w	r3, r3, #4
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d008      	beq.n	8001100 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	4918      	ldr	r1, [pc, #96]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0308 	and.w	r3, r3, #8
 8001108:	2b00      	cmp	r3, #0
 800110a:	d009      	beq.n	8001120 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691b      	ldr	r3, [r3, #16]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4910      	ldr	r1, [pc, #64]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 800111c:	4313      	orrs	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001120:	f000 f824 	bl	800116c <HAL_RCC_GetSysClockFreq>
 8001124:	4602      	mov	r2, r0
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <HAL_RCC_ClockConfig+0x1f0>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	091b      	lsrs	r3, r3, #4
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	490b      	ldr	r1, [pc, #44]	@ (8001160 <HAL_RCC_ClockConfig+0x1f4>)
 8001132:	5ccb      	ldrb	r3, [r1, r3]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	4a09      	ldr	r2, [pc, #36]	@ (8001164 <HAL_RCC_ClockConfig+0x1f8>)
 800113e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001140:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_RCC_ClockConfig+0x1fc>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f96b 	bl	8000420 <HAL_InitTick>
 800114a:	4603      	mov	r3, r0
 800114c:	72fb      	strb	r3, [r7, #11]

  return status;
 800114e:	7afb      	ldrb	r3, [r7, #11]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40022000 	.word	0x40022000
 800115c:	40021000 	.word	0x40021000
 8001160:	080013b4 	.word	0x080013b4
 8001164:	20000000 	.word	0x20000000
 8001168:	20000004 	.word	0x20000004

0800116c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	2300      	movs	r3, #0
 8001178:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800117a:	4b3e      	ldr	r3, [pc, #248]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
 8001182:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001184:	4b3b      	ldr	r3, [pc, #236]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	f003 0303 	and.w	r3, r3, #3
 800118c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d005      	beq.n	80011a0 <HAL_RCC_GetSysClockFreq+0x34>
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	2b0c      	cmp	r3, #12
 8001198:	d121      	bne.n	80011de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d11e      	bne.n	80011de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80011a0:	4b34      	ldr	r3, [pc, #208]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0308 	and.w	r3, r3, #8
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80011ac:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 80011ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e005      	b.n	80011c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80011bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 030f 	and.w	r3, r3, #15
 80011c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80011c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001278 <HAL_RCC_GetSysClockFreq+0x10c>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10d      	bne.n	80011f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011dc:	e00a      	b.n	80011f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d102      	bne.n	80011ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80011e4:	4b25      	ldr	r3, [pc, #148]	@ (800127c <HAL_RCC_GetSysClockFreq+0x110>)
 80011e6:	61bb      	str	r3, [r7, #24]
 80011e8:	e004      	b.n	80011f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d101      	bne.n	80011f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x114>)
 80011f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	2b0c      	cmp	r3, #12
 80011f8:	d134      	bne.n	8001264 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80011fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f003 0303 	and.w	r3, r3, #3
 8001202:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d003      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0xa6>
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b03      	cmp	r3, #3
 800120e:	d003      	beq.n	8001218 <HAL_RCC_GetSysClockFreq+0xac>
 8001210:	e005      	b.n	800121e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001212:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <HAL_RCC_GetSysClockFreq+0x110>)
 8001214:	617b      	str	r3, [r7, #20]
      break;
 8001216:	e005      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001218:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <HAL_RCC_GetSysClockFreq+0x114>)
 800121a:	617b      	str	r3, [r7, #20]
      break;
 800121c:	e002      	b.n	8001224 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	617b      	str	r3, [r7, #20]
      break;
 8001222:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001224:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	091b      	lsrs	r3, r3, #4
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	3301      	adds	r3, #1
 8001230:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001232:	4b10      	ldr	r3, [pc, #64]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	fb03 f202 	mul.w	r2, r3, r2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	fbb2 f3f3 	udiv	r3, r2, r3
 8001248:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800124a:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <HAL_RCC_GetSysClockFreq+0x108>)
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	0e5b      	lsrs	r3, r3, #25
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	3301      	adds	r3, #1
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001262:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001264:	69bb      	ldr	r3, [r7, #24]
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	@ 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	080013c4 	.word	0x080013c4
 800127c:	00f42400 	.word	0x00f42400
 8001280:	007a1200 	.word	0x007a1200

08001284 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001290:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800129c:	f7ff fa26 	bl	80006ec <HAL_PWREx_GetVoltageRange>
 80012a0:	6178      	str	r0, [r7, #20]
 80012a2:	e014      	b.n	80012ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a8:	4a24      	ldr	r2, [pc, #144]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80012bc:	f7ff fa16 	bl	80006ec <HAL_PWREx_GetVoltageRange>
 80012c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c6:	4a1d      	ldr	r2, [pc, #116]	@ (800133c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80012c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012cc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012d4:	d10b      	bne.n	80012ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b80      	cmp	r3, #128	@ 0x80
 80012da:	d919      	bls.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2ba0      	cmp	r3, #160	@ 0xa0
 80012e0:	d902      	bls.n	80012e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80012e2:	2302      	movs	r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	e013      	b.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80012e8:	2301      	movs	r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	e010      	b.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b80      	cmp	r3, #128	@ 0x80
 80012f2:	d902      	bls.n	80012fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80012f4:	2303      	movs	r3, #3
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	e00a      	b.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2b80      	cmp	r3, #128	@ 0x80
 80012fe:	d102      	bne.n	8001306 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001300:	2302      	movs	r3, #2
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	e004      	b.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b70      	cmp	r3, #112	@ 0x70
 800130a:	d101      	bne.n	8001310 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800130c:	2301      	movs	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 0207 	bic.w	r2, r3, #7
 8001318:	4909      	ldr	r1, [pc, #36]	@ (8001340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	4313      	orrs	r3, r2
 800131e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0307 	and.w	r3, r3, #7
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	429a      	cmp	r2, r3
 800132c:	d001      	beq.n	8001332 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	40022000 	.word	0x40022000

08001344 <memset>:
 8001344:	4402      	add	r2, r0
 8001346:	4603      	mov	r3, r0
 8001348:	4293      	cmp	r3, r2
 800134a:	d100      	bne.n	800134e <memset+0xa>
 800134c:	4770      	bx	lr
 800134e:	f803 1b01 	strb.w	r1, [r3], #1
 8001352:	e7f9      	b.n	8001348 <memset+0x4>

08001354 <__libc_init_array>:
 8001354:	b570      	push	{r4, r5, r6, lr}
 8001356:	4d0d      	ldr	r5, [pc, #52]	@ (800138c <__libc_init_array+0x38>)
 8001358:	4c0d      	ldr	r4, [pc, #52]	@ (8001390 <__libc_init_array+0x3c>)
 800135a:	1b64      	subs	r4, r4, r5
 800135c:	10a4      	asrs	r4, r4, #2
 800135e:	2600      	movs	r6, #0
 8001360:	42a6      	cmp	r6, r4
 8001362:	d109      	bne.n	8001378 <__libc_init_array+0x24>
 8001364:	4d0b      	ldr	r5, [pc, #44]	@ (8001394 <__libc_init_array+0x40>)
 8001366:	4c0c      	ldr	r4, [pc, #48]	@ (8001398 <__libc_init_array+0x44>)
 8001368:	f000 f818 	bl	800139c <_init>
 800136c:	1b64      	subs	r4, r4, r5
 800136e:	10a4      	asrs	r4, r4, #2
 8001370:	2600      	movs	r6, #0
 8001372:	42a6      	cmp	r6, r4
 8001374:	d105      	bne.n	8001382 <__libc_init_array+0x2e>
 8001376:	bd70      	pop	{r4, r5, r6, pc}
 8001378:	f855 3b04 	ldr.w	r3, [r5], #4
 800137c:	4798      	blx	r3
 800137e:	3601      	adds	r6, #1
 8001380:	e7ee      	b.n	8001360 <__libc_init_array+0xc>
 8001382:	f855 3b04 	ldr.w	r3, [r5], #4
 8001386:	4798      	blx	r3
 8001388:	3601      	adds	r6, #1
 800138a:	e7f2      	b.n	8001372 <__libc_init_array+0x1e>
 800138c:	080013f4 	.word	0x080013f4
 8001390:	080013f4 	.word	0x080013f4
 8001394:	080013f4 	.word	0x080013f4
 8001398:	080013f8 	.word	0x080013f8

0800139c <_init>:
 800139c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139e:	bf00      	nop
 80013a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013a2:	bc08      	pop	{r3}
 80013a4:	469e      	mov	lr, r3
 80013a6:	4770      	bx	lr

080013a8 <_fini>:
 80013a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013aa:	bf00      	nop
 80013ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ae:	bc08      	pop	{r3}
 80013b0:	469e      	mov	lr, r3
 80013b2:	4770      	bx	lr
